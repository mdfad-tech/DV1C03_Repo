pipeline {

    agent {
        node {
            label 'master'
        }
    }

    tools { 
        maven '3.8.4' 
    }

    options {
        buildDiscarder logRotator( 
                    daysToKeepStr: '15', 
                    numToKeepStr: '10'
            )
    }

    environment {
        APP_NAME = "STUDENT_APP"
        APP_ENV  = "DEV"
    }

    stages {
        
        stage('S1_22050019') {
            steps {
                cleanWs()
                sh """
                echo "S1_22050019: Environment Preparation Completed"
                """
            }
        }

        stage('S2_22050019') {
            steps {
                script {
                    def serverName = 'S2_22050019_Server'
                    def imageName = '22050019_webimage'
                    def port = 42000
                    
                    // stop and remove existing container
                    sh "docker stop ${serverName} || true"
                    sh "docker rm ${serverName} || true"
                    
                    // create new container
                    sh "docker run -d --name ${serverName} -p ${port}:80 ${imageName}"
                    
                    echo "S2_22050019: Web Server Creation Completed"
                }
            }
        }

        stage('API and DAST') {
         
            parallel {
            
                stage('S3_22050019'){
                    steps{
                        sh """
                        echo "S3_22050019: API Test Completed"
                        """
                    }
                }

                stage('S4_22050019'){
                    steps{
                        sh """
                        echo "S4_22050019: DAST Security Test Completed"
                        """
                    }
                }
            }
        }
        
        stage('S5_22050019') {
            steps {
                script {
                    def userInput = input(
                        message: 'Do you want to release the work?',
                        ok: 'Yes',
                        parameters: [
                            string(defaultValue: 'No', description: 'Type "Yes" to proceed', name: 'confirmation')
                        ]
                    )
                    if (userInput != 'Yes') {
                        error('Aborted by user')
                    }
                }
            }
        }

        stage('S6_22050019') {
            steps {
                script {
                    def s5Result = currentBuild.getBuildCauses('hudson.model.Cause$UpstreamCause').find {
                        it.getShortDescription().startsWith('Started by user')
                    }
                    if (s5Result != null) {
                        def userInput = input(
                            message: 'Do you want to release the work?',
                            ok: 'Yes',
                            parameters: [
                                string(defaultValue: 'No', description: 'Type "Yes" to proceed', name: 'confirmation')
                            ]
                        )
                        if (userInput != 'Yes') {
                            error('Aborted by user')
                        }
                        sh """
                        echo "Work Released - 22050019"
                        """
                    } else {
                        echo 'Skipping S6_22050019: S5_22050019 did not run'
                    }
                }
            }
        }

    }   
}
